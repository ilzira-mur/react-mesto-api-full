{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\n\nconst getResponse = res => {\n  if (res.ok) {\n    return res.json();\n  }\n\n  return Promise.reject(res.status);\n};\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    console.log(res);\n    return getResponse(res);\n  });\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    return getResponse(res);\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => {\n    console.log(res);\n\n    if (res.status === 200) {\n      return res.json();\n    }\n\n    if (res.status === 400) {\n      throw new Error(\"Токен не передан или передан не в том формате\");\n    }\n\n    if (res.status === 401) {\n      throw new Error(\"Переданный токен некорректен\");\n    }\n  }).then(data => {\n    return data;\n  }).catch(err => {\n    console.log(err);\n    return Promise.reject(err);\n  });\n};","map":{"version":3,"sources":["/Users/ilzira/dev/react-mesto-auth/src/utils/authForm.js"],"names":["BASE_URL","getResponse","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","body","JSON","stringify","then","console","log","authorize","getContent","token","Authorization","Error","data","catch","err"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB;;AAEP,MAAMC,WAAW,GAAIC,GAAD,IAAS;AAC3B,MAAIA,GAAG,CAACC,EAAR,EAAY;AACV,WAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeJ,GAAG,CAACK,MAAnB,CAAP;AACD,CALD;;AAOA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEX,QAAS,SAAb,EAAuB;AACjCY,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,MAAAA,QAAD;AAAWD,MAAAA;AAAX,KAAf;AAN2B,GAAvB,CAAL,CAQNQ,IARM,CAQAf,GAAD,IAAS;AACbgB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,GAAZ;AACA,WAAOD,WAAW,CAACC,GAAD,CAAlB;AACD,GAXM,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMkB,SAAS,GAAG,CAACX,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAOC,KAAK,CAAE,GAAEX,QAAS,SAAb,EAAuB;AACjCY,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAN2B,GAAvB,CAAL,CAQNO,IARM,CAQAf,GAAD,IAAS;AACb,WAAOD,WAAW,CAACC,GAAD,CAAlB;AACD,GAVM,CAAP;AAWD,CAZM;AAcP,OAAO,MAAMmB,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOX,KAAK,CAAE,GAAEX,QAAS,WAAb,EAAyB;AACnCY,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPU,MAAAA,aAAa,EAAG,UAASD,KAAM;AAFxB;AAF0B,GAAzB,CAAL,CAOJL,IAPI,CAOEf,GAAD,IAAS;AACbgB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,GAAZ;;AACE,QAAIA,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB;AACtB,aAAOL,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,QAAIF,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM,IAAIiB,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,QAAItB,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM,IAAIiB,KAAJ,CAAU,8BAAV,CAAN;AACD;AACJ,GAlBI,EAmBJP,IAnBI,CAmBEQ,IAAD,IAAU;AACd,WAAOA,IAAP;AACD,GArBI,EAsBJC,KAtBI,CAsBGC,GAAD,IAAS;AACdT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACA,WAAOtB,OAAO,CAACC,MAAR,CAAeqB,GAAf,CAAP;AACD,GAzBI,CAAP;AA0BD,CA3BM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nconst getResponse = (res) => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(res.status);\n};\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({password, email})\n  })\n  .then((res) => {\n    console.log(res)\n    return getResponse(res)\n  });\n};\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then((res) => {\n    return getResponse(res)\n  });\n};\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((res) => {\n      console.log(res)\n        if (res.status === 200) {\n          return res.json();\n        }\n        if (res.status === 400) {\n          throw new Error(\"Токен не передан или передан не в том формате\");\n        }\n        if (res.status === 401) {\n          throw new Error(\"Переданный токен некорректен\");\n        }\n    })\n    .then((data) => {\n      return data;\n    })\n    .catch((err) => {\n      console.log(err);\n      return Promise.reject(err);\n    });\n};"]},"metadata":{},"sourceType":"module"}